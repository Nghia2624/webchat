import js from '@eslint/js'
import globals from 'globals'
import reactPlugin from 'eslint-plugin-react'
import reactHooksPlugin from 'eslint-plugin-react-hooks'
import reactRefreshPlugin from 'eslint-plugin-react-refresh'

export default [
  js.configs.recommended,
  {
    files: ['**/*.{js,jsx,ts,tsx}'],
    languageOptions: {
      globals: {
        ...globals.browser,
        ...globals.es2021,
        ...globals.node,
      },
      parserOptions: {
        ecmaVersion: 'latest',
        sourceType: 'module',
        ecmaFeatures: {
          jsx: true,
        },
      },
    },
    plugins: {
      react: reactPlugin,
      'react-hooks': reactHooksPlugin,
      'react-refresh': reactRefreshPlugin,
    },
    rules: {
      // React rules
      'react/jsx-uses-react': 'error',
      'react/jsx-uses-vars': 'error',
      'react/prop-types': 'warn',
      'react/react-in-jsx-scope': 'off',
      'react/self-closing-comp': 'warn',
      'react/jsx-curly-brace-presence': ['warn', { props: 'never', children: 'never' }],
      'react/jsx-boolean-value': ['warn', 'never'],
      'react/jsx-pascal-case': 'warn',
      'react/jsx-no-useless-fragment': 'warn',
      'react/jsx-no-duplicate-props': 'error',
      'react/jsx-no-undef': 'error',
      'react/jsx-no-target-blank': 'warn',
      'react/jsx-no-bind': ['warn', { allowArrowFunctions: true }],
      'react/jsx-key': 'error',
      'react/jsx-handler-names': 'warn',
      'react/jsx-fragments': ['warn', 'syntax'],
      'react/jsx-first-prop-new-line': ['warn', 'multiline'],
      'react/jsx-equals-spacing': ['warn', 'never'],
      'react/jsx-closing-tag-location': 'warn',
      'react/jsx-closing-bracket-location': ['warn', 'line-aligned'],
      'react/jsx-child-element-spacing': 'warn',
      'react/jsx-curly-spacing': ['warn', { when: 'never', children: true }],
      'react/jsx-curly-newline': ['warn', { multiline: 'consistent', singleline: 'consistent' }],
      'react/jsx-bracket-same-line': ['warn', 'never'],
      'react/jsx-wrap-multilines': ['warn', {
        declaration: 'parens-new-line',
        assignment: 'parens-new-line',
        return: 'parens-new-line',
        arrow: 'parens-new-line',
        condition: 'parens-new-line',
        logical: 'parens-new-line',
        prop: 'parens-new-line',
      }],

      // React Hooks rules
      'react-hooks/rules-of-hooks': 'error',
      'react-hooks/exhaustive-deps': 'warn',

      // React Refresh rules
      'react-refresh/only-export-components': ['warn', { allowConstantExport: true }],

      // General rules
      'no-unused-vars': ['warn', { argsIgnorePattern: '^_', varsIgnorePattern: '^_' }],
      'no-console': ['warn', { allow: ['warn', 'error'] }],
      'no-debugger': 'warn',
      'no-duplicate-imports': 'error',
      'no-var': 'error',
      'prefer-const': 'warn',
      'prefer-arrow-callback': 'warn',
      'prefer-template': 'warn',
      'prefer-spread': 'warn',
      'prefer-rest-params': 'warn',
      'prefer-object-spread': 'warn',
      'prefer-destructuring': ['warn', {
        array: true,
        object: true,
      }, {
        enforceForRenamedProperties: false,
      }],
      'object-shorthand': ['warn', 'always'],
      'arrow-body-style': ['warn', 'as-needed'],
      'arrow-parens': ['warn', 'as-needed'],
      'arrow-spacing': 'warn',
      'no-confusing-arrow': ['warn', { allowParens: true }],
      'no-useless-constructor': 'warn',
      'no-useless-rename': 'warn',
      'no-useless-computed-key': 'warn',
      'no-useless-concat': 'warn',
      'no-useless-return': 'warn',
      'no-return-await': 'warn',
      'no-await-in-loop': 'warn',
      'no-param-reassign': ['warn', { props: true }],
      'no-multiple-empty-lines': ['warn', { max: 1, maxEOF: 0 }],
      'no-trailing-spaces': 'warn',
      'no-multi-spaces': 'warn',
      'no-mixed-spaces-and-tabs': 'error',
      'no-tabs': 'error',
      'eol-last': 'warn',
      'comma-dangle': ['warn', 'always-multiline'],
      'comma-spacing': ['warn', { before: false, after: true }],
      'comma-style': ['warn', 'last'],
      'semi': ['warn', 'always'],
      'semi-spacing': ['warn', { before: false, after: true }],
      'semi-style': ['warn', 'last'],
      'quotes': ['warn', 'single', { avoidEscape: true }],
      'quote-props': ['warn', 'as-needed'],
      'key-spacing': ['warn', { beforeColon: false, afterColon: true }],
      'keyword-spacing': ['warn', { before: true, after: true }],
      'space-before-blocks': ['warn', 'always'],
      'space-before-function-paren': ['warn', {
        anonymous: 'always',
        named: 'never',
        asyncArrow: 'always',
      }],
      'space-in-parens': ['warn', 'never'],
      'space-infix-ops': 'warn',
      'space-unary-ops': ['warn', {
        words: true,
        nonwords: false,
      }],
      'spaced-comment': ['warn', 'always'],
      'object-curly-spacing': ['warn', 'always'],
      'array-bracket-spacing': ['warn', 'never'],
      'computed-property-spacing': ['warn', 'never'],
      'block-spacing': ['warn', 'always'],
      'brace-style': ['warn', '1tbs'],
      'camelcase': ['warn', { properties: 'never' }],
      'new-cap': ['warn', {
        newIsCap: true,
        capIsNew: false,
      }],
      'new-parens': 'warn',
      'func-call-spacing': ['warn', 'never'],
      'func-name-matching': 'warn',
      'func-names': ['warn', 'as-needed'],
      'func-style': ['warn', 'expression'],
      'function-paren-newline': ['warn', 'multiline'],
      'implicit-arrow-linebreak': ['warn', 'beside'],
      'indent': ['warn', 2, {
        SwitchCase: 1,
        VariableDeclarator: 'first',
        outerIIFEBody: 1,
        MemberExpression: 1,
        FunctionDeclaration: {
          parameters: 1,
          body: 1,
        },
        FunctionExpression: {
          parameters: 1,
          body: 1,
        },
        CallExpression: {
          arguments: 1,
        },
        ArrayExpression: 1,
        ObjectExpression: 1,
        ImportDeclaration: 1,
        flatTernaryExpressions: false,
        ignoreComments: false,
      }],
      'linebreak-style': ['warn', 'unix'],
      'lines-around-comment': ['warn', {
        beforeBlockComment: true,
        afterBlockComment: false,
        beforeLineComment: true,
        afterLineComment: false,
        allowBlockStart: true,
        allowBlockEnd: true,
        allowObjectStart: true,
        allowObjectEnd: true,
        allowArrayStart: true,
        allowArrayEnd: true,
      }],
      'lines-between-class-members': ['warn', 'always', { exceptAfterSingleLine: true }],
      'max-len': ['warn', {
        code: 100,
        tabWidth: 2,
        comments: 80,
        ignoreUrls: true,
        ignoreStrings: true,
        ignoreTemplateLiterals: true,
        ignoreRegExpLiterals: true,
      }],
      'max-lines': ['warn', {
        max: 300,
        skipBlankLines: true,
        skipComments: true,
      }],
      'max-lines-per-function': ['warn', {
        max: 50,
        skipBlankLines: true,
        skipComments: true,
        IIFEs: true,
      }],
      'max-nested-callbacks': ['warn', 3],
      'max-params': ['warn', 3],
      'max-statements': ['warn', 15],
      'max-statements-per-line': ['warn', { max: 1 }],
      'multiline-comment-style': ['warn', 'starred-block'],
      'multiline-ternary': ['warn', 'always-multiline'],
      'newline-per-chained-call': ['warn', { ignoreChainWithDepth: 3 }],
      'no-negated-condition': 'warn',
      'no-nested-ternary': 'warn',
      'no-unneeded-ternary': 'warn',
      'one-var': ['warn', 'never'],
      'operator-assignment': ['warn', 'always'],
      'operator-linebreak': ['warn', 'before'],
      'padded-blocks': ['warn', 'never'],
      'padding-line-between-statements': [
        'warn',
        { blankLine: 'always', prev: '*', next: 'return' },
        { blankLine: 'always', prev: ['const', 'let', 'var'], next: '*' },
        { blankLine: 'any', prev: ['const', 'let', 'var'], next: ['const', 'let', 'var'] },
      ],
      'prefer-exponentiation-operator': 'warn',
      'prefer-object-has-own': 'warn',
      'prefer-regex-literals': 'warn',
      'require-await': 'warn',
      'sort-imports': ['warn', {
        ignoreCase: false,
        ignoreDeclarationSort: true,
        ignoreMemberSort: false,
        memberSyntaxSortOrder: ['none', 'all', 'multiple', 'single'],
        allowSeparatedGroups: true,
      }],
      'sort-keys': ['warn', 'asc', { caseSensitive: false, natural: true }],
      'sort-vars': ['warn', { ignoreCase: true }],
      'switch-colon-spacing': ['warn', { after: true, before: false }],
      'template-curly-spacing': ['warn', 'never'],
      'template-tag-spacing': ['warn', 'never'],
      'unicode-bom': ['warn', 'never'],
      'wrap-iife': ['warn', 'outside'],
      'wrap-regex': 'warn',
      'yield-star-spacing': ['warn', 'both'],
    },
    settings: {
      react: {
        version: 'detect',
      },
    },
  },
]
