const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

/**
 * Script l√†m s·∫°ch v√† chu·∫©n h√≥a c·∫•u tr√∫c d·ª± √°n frontend
 * - Ki·ªÉm tra c·∫•u h√¨nh PostCSS
 * - T·ªëi ∆∞u h√≥a CSS
 * - X√°c minh c√°c dependency
 */

console.log('üßπ B·∫Øt ƒë·∫ßu qu√° tr√¨nh l√†m s·∫°ch v√† t·ªëi ∆∞u h√≥a...');

// Ki·ªÉm tra c·∫•u h√¨nh PostCSS
const postCssCheck = () => {
  try {
    console.log('üëâ Ki·ªÉm tra c·∫•u h√¨nh PostCSS...');
    
    const postCssPath = path.join(__dirname, 'postcss.config.js');
    const content = fs.readFileSync(postCssPath, 'utf8');
    
    // Ki·ªÉm tra xem c·∫•u h√¨nh c√≥ d√πng @tailwindcss/postcss kh√¥ng
    if (!content.includes('@tailwindcss/postcss')) {
      console.log('‚ö†Ô∏è C·∫•u h√¨nh PostCSS kh√¥ng s·ª≠ d·ª•ng @tailwindcss/postcss. Ti·∫øn h√†nh s·ª≠a ch·ªØa...');
      
      const newContent = `module.exports = {
  plugins: {
    '@tailwindcss/postcss': {},
    autoprefixer: {},
  },
}`;
      
      fs.writeFileSync(postCssPath, newContent);
      console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t c·∫•u h√¨nh PostCSS.');
    } else {
      console.log('‚úÖ C·∫•u h√¨nh PostCSS ƒë√£ ch√≠nh x√°c.');
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra c·∫•u h√¨nh PostCSS:', error.message);
  }
};

// X√≥a c√°c file CSS kh√¥ng s·ª≠ d·ª•ng
const cleanupCss = () => {
  try {
    console.log('üëâ D·ªçn d·∫πp c√°c file CSS kh√¥ng c·∫ßn thi·∫øt...');
    
    const stylesDir = path.join(__dirname, 'src', 'styles');
    const cssFiles = fs.readdirSync(stylesDir).filter(file => file.endsWith('.css'));
    
    // D·ªØ li·ªáu thi·∫øt y·∫øu: tailwind.css, main.css, layout.css
    const essentialFiles = ['tailwind.css', 'main.css', 'layout.css'];
    
    for (const file of cssFiles) {
      if (!essentialFiles.includes(file)) {
        const filePath = path.join(stylesDir, file);
        const stat = fs.statSync(filePath);
        
        if (stat.isFile()) {
          // L∆∞u tr·ªØ file tr∆∞·ªõc khi x√≥a
          const backupDir = path.join(__dirname, 'backup', 'styles');
          
          if (!fs.existsSync(backupDir)) {
            fs.mkdirSync(backupDir, { recursive: true });
          }
          
          fs.copyFileSync(filePath, path.join(backupDir, file));
          
          // Ki·ªÉm tra n·ªôi dung file d√†i h∆°n 10 d√≤ng th√¨ kh√¥ng x√≥a
          const content = fs.readFileSync(filePath, 'utf8');
          const lines = content.split('\n');
          
          if (lines.length <= 10) {
            fs.unlinkSync(filePath);
            console.log(`üóëÔ∏è ƒê√£ x√≥a ${file} (ƒë√£ sao l∆∞u).`);
          } else {
            console.log(`‚ö†Ô∏è Kh√¥ng x√≥a ${file} (${lines.length} d√≤ng) v√¨ c√≥ th·ªÉ ch·ª©a code quan tr·ªçng.`);
          }
        }
      }
    }
    
    console.log('‚úÖ Ho√†n t·∫•t d·ªçn d·∫πp CSS.');
  } catch (error) {
    console.error('‚ùå L·ªói khi d·ªçn d·∫πp CSS:', error.message);
  }
};

// Ki·ªÉm tra c√°c dependency
const checkDependencies = () => {
  try {
    console.log('üëâ Ki·ªÉm tra c√°c dependency...');
    
    // ƒê·∫£m b·∫£o @tailwindcss/postcss ƒë∆∞·ª£c c√†i ƒë·∫∑t
    try {
      execSync('npm ls @tailwindcss/postcss', { stdio: 'pipe' });
      console.log('‚úÖ @tailwindcss/postcss ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t.');
    } catch (error) {
      console.log('‚ö†Ô∏è @tailwindcss/postcss ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Ti·∫øn h√†nh c√†i ƒë·∫∑t...');
      execSync('npm install @tailwindcss/postcss --save-dev', { stdio: 'inherit' });
    }
    
    // Ki·ªÉm tra c√°c package v·∫≠t t∆∞ quan tr·ªçng
    const essentialPackages = [
      'autoprefixer',
      'postcss',
    ];
    
    for (const pkg of essentialPackages) {
      try {
        execSync(`npm ls ${pkg}`, { stdio: 'pipe' });
        console.log(`‚úÖ ${pkg} ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t.`);
      } catch (error) {
        console.log(`‚ö†Ô∏è ${pkg} ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Ti·∫øn h√†nh c√†i ƒë·∫∑t...`);
        execSync(`npm install ${pkg} --save-dev`, { stdio: 'inherit' });
      }
    }
    
    console.log('‚úÖ Ho√†n t·∫•t ki·ªÉm tra dependencies.');
  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra dependencies:', error.message);
  }
};

// T·ªëi ∆∞u h√≥a c·∫•u tr√∫c th∆∞ m·ª•c
const optimizeDirectory = () => {
  try {
    console.log('üëâ T·ªëi ∆∞u h√≥a c·∫•u tr√∫c th∆∞ m·ª•c...');
    
    // ƒê·∫£m b·∫£o c√≥ c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
    const requiredDirs = [
      'src/components/common',
      'src/components/layout',
      'src/hooks',
      'src/utils/api',
      'src/utils/helpers',
      'src/assets/icons',
      'src/assets/images',
    ];
    
    for (const dir of requiredDirs) {
      const dirPath = path.join(__dirname, dir);
      
      if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath, { recursive: true });
        console.log(`üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c ${dir}`);
      }
    }
    
    console.log('‚úÖ Ho√†n t·∫•t t·ªëi ∆∞u h√≥a c·∫•u tr√∫c th∆∞ m·ª•c.');
  } catch (error) {
    console.error('‚ùå L·ªói khi t·ªëi ∆∞u h√≥a c·∫•u tr√∫c th∆∞ m·ª•c:', error.message);
  }
};

// Ch·∫°y c√°c ch·ª©c nƒÉng
const runCleanup = async () => {
  console.log('üöÄ B·∫Øt ƒë·∫ßu quy tr√¨nh l√†m s·∫°ch v√† t·ªëi ∆∞u h√≥a...');
  
  postCssCheck();
  cleanupCss();
  checkDependencies();
  optimizeDirectory();
  
  console.log('‚ú® Ho√†n t·∫•t quy tr√¨nh l√†m s·∫°ch v√† t·ªëi ∆∞u h√≥a!');
};

runCleanup(); 